const glob = require('glob');
const { readFile, writeFile } = require('fs');

// The index file automatically generated by typedoc-plugin-markdown
// only contains the list of modules of the package.
// We'll add an introduction paragraph to that index file
// and use metadata to place it in the first position.
const generatedTitle = `# @arbitrum/sdk`;
const indexIntroContents = `
# Arbitrum SDK

[Arbitrum SDK](https://github.com/OffchainLabs/arbitrum-sdk) is a typescript library for client-side interactions with Arbitrum. It provides common helper functionality as well as access to the underlying smart contract interfaces.
        
Below is a list of modules of the library. See the [tutorials](https://github.com/OffchainLabs/arbitrum-tutorials) for further examples of how to use these classes.
`;

// Traverse all typedoc generated md files
glob('./sdk-docs/**/*', function (err, res) {
  if (err) {
    console.error('Error', err);
  } else {
    for (const path of res) {
      if (!path.endsWith('.md')) continue;

      // Modifying the file contents of the index file
      //  - Replace the automatically generated title with our custom title and description
      if (path.includes('/sdk-docs/index.md')) {
        readFile(path, 'utf-8', function (err, contents) {
          if (err) {
            console.error(err);
            return;
          }

          writeFile(
            path,
            contents.replace(generatedTitle, indexIntroContents),
            'utf-8',
            function (err) {
              if (err) console.error('Error', err);
            },
          );
        });

        continue;
      }

      // Traverse all files
      readFile(path, 'utf-8', function (err, contents) {
        if (err) {
          console.error(err);
          return;
        }

        // Fix JSX md rendering breaking tags (only <T> tags break docusaurus, so we keep the rest):
        const replaced = contents.replace(/<T>/g, '&lt;T&gt;');
        writeFile(path, replaced, 'utf-8', function (err) {
          if (err) console.error('Error', err);
        });
      });
    }
  }
});
