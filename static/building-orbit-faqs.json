[
  {
    "question": "Can I use Orbit to deploy a mainnet chain?",
    "answer": "<p>\nYes! Arbitrum Orbit's core technology has undergone a comprehensive audit and is now able to support deployments to mainnet. You can read more about it <a href=\"https://docs.arbitrum.io/launch-orbit-chain/concepts/public-preview-expectations#arbitrum-orbit-is-mainnet-ready-but-deploy-to-testnet-first\">here</a>.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "can-i-use-orbit-to-deploy-a-mainnet-chain"
  },
  {
    "question": "Do I need permission/license to launch an Orbit chain?",
    "answer": "<p>\nYou can launch any Orbit chain permissionlessly. \n</p>\n\n<p>\nNitro is licensed under a <a href=\"https://github.com/OffchainLabs/nitro?tab=License-1-ov-file\">Business Source license</a>, similar to DeFi protocols like Uniswap and Aave, among others. This license contains an Additional Use Grant that permits the permissionless deployment of Nitro software on blockchains that settle to Arbitrum One or Nova. \n</p>\n\n<p>\nHowever, Orbit chains that settle to a parent chain other than Arbitrum One or Nova are subject to additional licensing guidelines under the <a href=\"https://docs.arbitrum.foundation/aep/ArbitrumExpansionProgramTerms.pdf\">AEP</a>.\n</p>\n\n<p>\n\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "do-i-need-permissionlicense-to-launch-an-orbit-chain"
  },
  {
    "question": "Does Arbitrum officially deploy and/or maintain L3s for external teams?",
    "answer": "<p>\nNo. Teams are required to deploy and maintain their Orbit chains. There are, however, several RaaS (Rollup as a Service) providers that can deploy and maintain the Orbit chain for you.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "does-arbitrum-officially-deploy-andor-maintain-l3s-for-external-teams"
  },
  {
    "question": "Can I modify Orbit's underlying technology to customize my chain?",
    "answer": "<p>\nYes, you can make any changes you require to the underlying Nitro code base.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "can-i-modify-orbits-underlying-technology-to-customize-my-chain"
  },
  {
    "question": "What Data Availability (DA) solutions are currently available for Orbit chains?",
    "answer": "<p>\nArbitrum Orbit currently supports 3 different DA solutions:\n</p>\n\n<ul>\n<li>Rollup, posting data to the parent chain which ultimately posts the data to Ethereum.</li>\n<li>AnyTrust, posting data to a Data Availability Committee, selected by the chain owner.</li>\n<li>Celestia, posting data to <a href=\"https://blog.celestia.org/celestia-is-first-modular-data-availability-network-to-integrate-with-arbitrum-orbit/\">Celestia network</a>.</li>\n</ul>\n<p>\nNote that using AnyTrust gives the chain owner the most flexibility and cheapest fees.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "what-data-availability-da-solutions-are-currently-available-for-orbit-chains"
  },
  {
    "question": "What token is used to pay gas fees on Orbit chains?",
    "answer": "<p>\nBy default, Orbit chains pay gas in ETH. However, Orbit chains using AnyTrust can be configured to use any ERC-20 token as the gas fee token of the chain.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "what-token-is-used-to-pay-gas-fees-on-orbit-chains"
  },
  {
    "question": "Can I use Ethereum toolkits to develop on my Orbit chain?",
    "answer": "<p>\nOrbit chains are fully EVM-compatible. Most tools that support Ethereum should be able to support an Orbit chain. There are, however, certain differences that developers need to keep in mind when building on an Orbit chain. You can find them <a href=\"https://docs.arbitrum.io/for-devs/concepts/differences-between-arbitrum-ethereum/overview\">here</a>.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "can-i-use-ethereum-toolkits-to-develop-on-my-orbit-chain"
  },
  {
    "question": "Do Orbit chains have any built-in AA solution?",
    "answer": "<p>\nNot by default, but they can be customized to have native AA.\n</p>\n\n",
    "key": "do-orbit-chains-have-any-builtin-aa-solution"
  },
  {
    "question": "Is there any cross-chain bridging solution between two Orbit chains?",
    "answer": "<p>\nThere is currently no Orbit-to-Orbit native bridging solution, other than going through the parent chain (if they share the same parent chain). However, there are many third-party bridges that have expressed interest in supporting Orbit chains.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "is-there-any-crosschain-bridging-solution-between-two-orbit-chains"
  },
  {
    "question": "Is there an official block explorer for Orbit chains?",
    "answer": "<p>\nOrbit chains deployments usually come with an open-source blockscout explorer by default, but there are many third-party solutions that have expressed interest in supporting Orbit chains.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "is-there-an-official-block-explorer-for-orbit-chains"
  },
  {
    "question": "Is there any indexing solution that supports Orbit chains?",
    "answer": "<p>\nSimilar to bridges and block explorers, there are many third-party indexing solutions that have expressed interest in supporting Orbit chains.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "is-there-any-indexing-solution-that-supports-orbit-chains"
  },
  {
    "question": "Can I increase the maximum contract size for my Orbit chain?",
    "answer": "<p>\nYes, Orbit supports an increased smart contract size limit of up to 96kB. You can use our <a href=\"https://github.com/OffchainLabs/arbitrum-orbit-sdk\">Orbit SDK</a> and configure the parameters <a href=\"https://github.com/OffchainLabs/arbitrum-orbit-sdk/blob/main/src/prepareChainConfig.ts#L29\">MaxCodeSize and MaxInitCodeSize</a> when calling <a href=\"https://github.com/OffchainLabs/arbitrum-orbit-sdk/blob/main/examples/prepare-node-config/index.ts#L43\">prepareNodeConfig</a>. Note that the smart contract size limit parameters can't be changed via upgrade after deployment.\n</p>\n\n<p>\n\n</p>\n\n",
    "key": "can-i-increase-the-maximum-contract-size-for-my-orbit-chain"
  },
  {
    "question": "How can I modify Nitro to force posting an invalid assertion and test the fraud proof mechanism?",
    "answer": "<p>\nForcing an invalid assertion in the chain is not supported at the moment. However, if you're building Nitro locally, you can run the following test that goes through the whole rollup/challenge mechanism:\n</p>\n\n```shell\ngo test ./system_tests/ -tags=challengetest -run=TestChallenge\n\n```\n<p>\n\n</p>\n\n",
    "key": "how-can-i-modify-nitro-to-force-posting-an-invalid-assertion-and-test-the-fraud-proof-mechanism"
  },
  {
    "question": "What fee collectors can be configured on my chain?",
    "answer": "<p>\nThere are 4 fee types that can be configured on an Orbit chain:\n</p>\n\n<ul>\n<li>L2 base fee: L2 execution fees corresponding to the minimum base price of the chain. This is paid to the infraFeeAccount, which can be set by calling <code>ArbOwner.setInfraFeeAccount()</code>.</li>\n<li>L2 surplus fee: L2 execution fees above the minimum base price (in the case of congestion). This is paid to the networkFeeAccount, which can be set by calling <code>ArbOwner.setNetworkFeeAccount()</code>.</li>\n<li>L1 base fee: Relative fees for posting a transaction on the parent chain. This is paid ultimately to the fee collector of the active batch poster. The batch poster can be set by calling <code>SequencerInbox.setIsBatchPoster()</code> on the parent chain. And a different fee collector for that batch poster can be specified by calling <code>ArbAggregator.setFeeCollector()</code>.</li>\n<li>L1 surplus fee: Any extra fees rewarded to the batch poster. This is paid to a specific L1RewardRecipient, which can be set by calling <code>ArbOwner.setL1PricingRewardRecipient()</code></li>\n</ul>\n<p>\nMore detailed information about fees can be found in the <a href=\"https://docs.arbitrum.io/arbos/l1-pricing\">L1 fees</a> and <a href=\"https://docs.arbitrum.io/arbos/gas\">L2 fees</a> pages.\n</p>\n\n<p>\nInformation about the precompiles methods can be found in the <a href=\"https://docs.arbitrum.io/build-decentralized-apps/precompiles/reference\">Precompiles reference page</a>.\n</p>\n\n",
    "key": "what-fee-collectors-can-be-configured-on-my-chain"
  },
  {
    "question": "What is the lowest you can set the base fee to?",
    "answer": "<p>\nYou can set the base fee to any amount to charge users less. You can even set it to <code>0</code> (however, this would open the chain to DOS attacks). If the Orbit base fee is <code>0</code>, users are then only paying for the cost of DA.\n</p>\n\n",
    "key": "what-is-the-lowest-you-can-set-the-base-fee-to"
  },
  {
    "question": "How does fee collection work in Nitro?",
    "answer": "<p>\nThere are 4 fee types that can be configured on Nitro:\n</p>\n\n<ul>\n<li>L2 base fee: L2 execution fees corresponding to the minimum base price of the chain. This is paid to the <code>infraFeeAccount</code>, and you can set it by calling <code>ArbOwner.setInfraFeeAccount()</code>.</li>\n<li>L2 surplus fee: L2 execution fees above the minimum base price (in the case of congestion). This is paid to the <code>networkFeeAccount</code>, and you can set it by calling <code>ArbOwner.setNetworkFeeAccount()</code>.</li>\n<li>L1 base fee: Relative fees for posting this transaction on the parent chain. This is paid ultimately to the fee collector of the active batch poster. You can set the batch poster by calling <code>SequencerInbox.setIsBatchPoster()</code>, on the parent chain, and specify a different fee collector for that batch poster by calling <code>ArbAggregator.setFeeCollector()</code>.</li>\n<li>L1 surplus fee: Any extra fees rewarded to the batch poster. This is paid to a specific <code>L1RewardRecipient</code>, and you can set it by calling <code>ArbOwner.setL1PricingRewardRecipient()</code></li>\n</ul>\n<p>\nYou can find more detailed information about fees in these pages:- \n<br />\n\n<br />\nL1 fees:Â <a href=\"https://docs.arbitrum.io/arbos/l1-pricing\">https://docs.arbitrum.io/arbos/l1-pricing</a>- L2 fees:Â <a href=\"https://docs.arbitrum.io/arbos/gas\">https://docs.arbitrum.io/arbos/gas</a>\n<br />\n\n<br />\nAnd information about the precompiles methods in:Â <a href=\"https://docs.arbitrum.io/build-decentralized-apps/precompiles/reference\">https://docs.arbitrum.io/build-decentralized-apps/precompiles/reference</a>\n</p>\n\n",
    "key": "how-does-fee-collection-work-in-nitro"
  },
  {
    "question": "Can you upgrade the smart contract size limit once deployed?",
    "answer": "<p>\nNo.\n</p>\n\n<p>\nThere's no way to version it so that old blocks are executed under the past limit and new blocks are executed for the new limit. \n</p>\n\n",
    "key": "can-you-upgrade-the-smart-contract-size-limit-once-deployed"
  },
  {
    "question": "Can you set the block speed below 100ms?",
    "answer": "<p>\nThe implications of reducing the block speed below 100ms are that an increased block count will put more strain on third-party providers, node runners, indexers, etc.\n</p>\n\n",
    "key": "can-you-set-the-block-speed-below-100ms"
  },
  {
    "question": "Can I set fast deposits for an L3?",
    "answer": "<p>\nYes, we have documented fast deposits in <a href=\"https://www.notion.so/launch-arbitrum-chain/how-tos/arbitrum-chain-finality.mdx\">how to configure delayed inbox finality</a>.\n</p>\n\n<p>\nThere is a flag that can be changed, which allows an Arbitrum chain to wait for finality on the parent chain before depositing a transaction.\n<br />\nFor an L3 on Arb One, for example, we consider this a feature because they can instantly register a deposit on the child chain, as Arb One has an ultra-low re-org risk (having never re-organized).\n<br />\nFor an L2, however, we recommend waiting ~12 minutes for L1 finality, as there is a greater risk of reorganization, for example, the deposit transaction not being included immediately in the fork-choice.\n</p>\n\n",
    "key": "can-i-set-fast-deposits-for-an-l3"
  },
  {
    "question": "How do I increase the max transaction data size?",
    "answer": "<p>\n:::warning Always test first\n</p>\n\n<p>\nTest this thoroughly on a testnet first.\n</p>\n\n<p>\n:::\n</p>\n\n<ol>\n<li>This is a hard limit in the codebase to prevent DoS attacks. If you want to modify this, you'll need to follow this <a href=\"https://www.notion.so/launch-arbitrum-chain/05-customize-your-chain/customize-stf.mdx\">procedure</a> to create a new WASM module root with an updated max L2 message size. Other limits might also need to be updated, such as the maximum decompressed batch size. Be sure to modify everything starting with the latest version, which includes a couple of extra safety checks that may help prevent issues.</li>\n<li>You could disable this limit if you were confident you would stick to AnyTrust and not need to fall back to posting data onchain.</li>\n<li>Defaults are in place for non-AnyTrust batch posting, which would need to fit the L3 user's transaction into a batch posted as an L2 transaction, thus respecting L2 transaction size limits.</li></ol>\n\n",
    "key": "how-do-i-increase-the-max-transaction-data-size"
  },
  {
    "question": "What is the max theoretical TPS for an Arbitrum Chain?",
    "answer": "<p>\nMax TPS is a challenging metric to measure, as it relies on network activity and the type of submitted transactions. We can, however, calculate the max throughput using default orbit chain parameters.\n<br />\nThe actual maximum throughput depends on the configurable execution parameters:\n</p>\n\n<p>\n<strong>Using standard Arbitrum chain defaults</strong>\n</p>\n\n<ul>\n<li>Block time: 250ms</li>\n<li>Block gas limit: 32M L2 gas</li>\n<li>Max L2 gas per second: 128M gas/sec</li>\n<li>These parameters are entirely configurable, for example, by dropping the block time to 100ms or by increasing the block gas limit (which comes at the cost of faster state bloat).</li>\n<li>Dropping to 100ms and doubling the block gas limit to 64m L2 gas would achieve 640m L2 gas per second.</li>\n</ul>\n<p>\n<strong>The actual TPS varies depending on the gas cost per transaction:</strong>\n</p>\n\n<ul>\n<li>A simple transfer (~21,000 gas) could approximately achieve around 6,000 TPS.</li>\n<li>A more complex transaction (~200,000 gas) would enable approximately 640 TPS.</li></ul>\n\n",
    "key": "what-is-the-max-theoretical-tps-for-an-arbitrum-chain"
  },
  {
    "question": "Why is the WETH Gateway not necessary for custom gas token chains?",
    "answer": "<p>\nThe <code>WETH</code> gateway used in the token bridge is a special, custom gateway that unwraps the <code>WETH</code> deposits and sends them to the Arbitrum chain, then wraps them again on the Arbitrum chain. Since <code>ETH</code> is the gas token in the Arbitrum (Orbit) chain, there's no need to perform this operation, so you can use a standard <code>ERC-20</code> for <code>WETH</code> (this is the default case of the token bridge so that you wouldn't need a special <code>WETH</code> gateway).\n</p>\n\n<p>\nIf you want to enable extra custom operations with <code>WETH</code>, you can create a custom token and a custom gateway to handle this case.\n</p>\n\n",
    "key": "why-is-the-weth-gateway-not-necessary-for-custom-gas-token-chains"
  },
  {
    "question": "How do we verify if an ERC-20 was bridged using the native bridge?",
    "answer": "<p>\nThe following applies to a parent-side bridge deployed on Arbitrum One:\n<br />\nIf the token was bridged using the native token bridge, you can go to <a href=\"https://github.com/OffchainLabs/token-bridge-contracts/blob/5bdf33259d2d9ae52ddc69bc5a9cbc558c4c40c7/contracts/tokenbridge/arbitrum/gateway/L2ERC20Gateway.sol#L47\">parent_side_bridge_contract</a>\n</p>\n\n<p>\nCall the <code>calculateL2TokenAddress</code> address with the address of the token on the parent chain.\n<br />\nFor example, in case plugging in the <code>USDT</code> address on Arbitrum One <code>0xfd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9</code>, you get <code>0xB2C565cd7e807e6A1C38bFE32D8FAb9c96ffCeCa</code>.\n</p>\n\n",
    "key": "how-do-we-verify-if-an-erc20-was-bridged-using-the-native-bridge"
  },
  {
    "question": "What are the estimated infrastructure costs to run the Sequencer?",
    "answer": "<p>\nThe estimated cost is approximately $600 per sequencer replica per month for a low-to-medium activity chain. With networking and storage included, the estimated monthly cost would be $1,500 for the Sequencer.\n</p>\n\n",
    "key": "what-are-the-estimated-infrastructure-costs-to-run-the-sequencer"
  },
  {
    "question": "What are the different validator modes?",
    "answer": "<ul>\n<li><strong>Defensive (allowlist required)</strong>:<ul>\n<li>Post stake and create a challenge if local state disagrees with the onchain assertion (wallet required, will only post stake onchain if a bad assertion is found.</li></ul>\n\n</li>\n<li><strong>StakeLatest (allowlist required)</strong>:<ul>\n<li>Stay staked on the latest assertion and challenge any bad assertions found (wallet required, always staked, uses some gas every time new assertion created)</li></ul>\n\n</li>\n<li><strong>ResolveNodes (allowlist required)</strong>:<ul>\n<li>Stay staked on the latest assertion, resolve any unconfirmed assertions, and challenge any bad assertions found (wallet required, always staked, uses some gas every time an unconfirmed assertion is resolved or a new assertion is created)</li></ul>\n\n</li>\n<li><strong>MakeNodes (allowlist required)</strong>:<ul>\n<li>Continuously create new assertions, challenging any bad assertions found (wallet required, always staked, most expensive node to run)</li>\n<li>Note that if there is more than one MakeNodes validator running, they might all try to create a new assertion at the same time. In that case, only one will be successful, and the others will have still spent gas on reverted calls that did nothing.</li></ul>\n\n</li>\n<li><strong>Watchtower</strong>:<ul>\n<li>A node in Watchtower mode will immediately log an error if an onchain assertion deviates from the locally computed chain state. It doesn't require a wallet, as it never takes any action onchain. This mode is the default-enabled strategy for all nodes (full and archive).</li></ul>\n\n</li></ul>\n\n",
    "key": "what-are-the-different-validator-modes"
  },
  {
    "question": "What are the costs to run a validator?",
    "answer": "<p>\nThe estimated monthly cost for Watchtower validators will be approximately $500. All other validators will cost $800 to $900 per month.\n</p>\n\n",
    "key": "what-are-the-costs-to-run-a-validator"
  },
  {
    "question": "What is the amount of funds that a validator needs in its wallet to participate in fraud proofs?",
    "answer": "<p>\nTo participate in a fraud-proof game, your validator will need funds (can be any <code>ERC-20</code>) for two things:\n</p>\n\n<ol>\n<li>Gas costs to post assertions</li>\n</ol>\n<ul>\n<li>Depends on your parent chain and is estimated to cost 163109 gas per assertion. If you assume one assertion per hour, then you can multiply your gas cost per hour to calculate the annual cost. This assumption holds under normal operation, but during a challenge, you may post more assertions (these will scale with the number of challenges), so it might be one assertion every 10 minutes, depending on how many challenges are ongoing.</li>\n</ul>\n<ol>\n<li>Bonds to participate</li>\n</ol>\n<ul>\n<li>Depends on your config. You can set the bond amounts to be any amount you want. For Arbitrum One, this is 3600 <code>ETH</code> initially and then 555+79 <code>ETH</code> per each subsequent challenge. These amounts were carefully selected and designed, with extensive research behind them, specifically for Arbitrum One. There could be one or multiple challenges, and so there will always be a possibility where more funds are needed.</li></ul>\n\n",
    "key": "what-is-the-amount-of-funds-that-a-validator-needs-in-its-wallet-to-participate-in-fraud-proofs"
  },
  {
    "question": "How do I export snapshots for nitro-based chains? Is there any tooling for this?",
    "answer": "<p>\nWe currently don't have any toolkits available for this. The best way to make a snapshot is to gracefully stop the node and make a copy of the database.\n</p>\n\n",
    "key": "how-do-i-export-snapshots-for-nitrobased-chains-is-there-any-tooling-for-this"
  },
  {
    "question": "What happens if I don't post an assertion for a long period of time?",
    "answer": "<p>\nOver time, without creating assertions, the validator whitelist in the Rollup contract can become disabled. If you look at the <code><a href=\"https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupUserLogic.sol#L62\">removeWhitelistAfterValidatorAfk</a></code> method, it allows you to disable the whitelist after <code>confirmPeriodBlocks + VALIDATOR_AFK_BLOCKS</code> L1 blocks have passed since the last assertion created.\n</p>\n\n<p>\nAs a default, that's 7200 + 45818 blocks (a bit less than eight days). Disabling the whitelist is not a significant issue if you continue to monitor the chain and run a validator. It can be enabled using <code><a href=\"https://github.com/OffchainLabs/nitro-contracts/blob/main/src/rollup/RollupAdminLogic.sol#L378\">setValidatorWhitelistDisabled()</a></code> by the chain owner. But it's always better to avoid reaching that point.\n</p>\n\n",
    "key": "what-happens-if-i-dont-post-an-assertion-for-a-long-period-of-time"
  },
  {
    "question": "Is there a way to increase idle timeout on RPC nodes for websocket connections?",
    "answer": "<p>\nThere is no way to increase the idle timeout for WebSocket connections via configuration options (geth doesn't provide this, and neither do we). The default value in Geth for the idle timeout is, as noted in <a href=\"https://github.com/OffchainLabs/go-ethereum/blob/85dc1b7ed058bea72a2707e59f5878815dd00485/rpc/websocket.go#L38\">the query</a>, 30 seconds.\n</p>\n\n",
    "key": "is-there-a-way-to-increase-idle-timeout-on-rpc-nodes-for-websocket-connections"
  },
  {
    "question": "How do I run a split validator?",
    "answer": "<p>\nUsing Nitro's split validation, it can be run as a separate container using:\n</p>\n\n```plain text\nnode.block-validator.validation-server-configs-list\n\n```\n<p>\nIt's possible to run it in the same container. That is the default way, and then Nitro uses a loopback connection. You can read more about this in <a href=\"https://www.notion.so/run-arbitrum-node/more-types/04-run-split-validator-node.mdx\">running a split-validator</a>.\n</p>\n\n",
    "key": "how-do-i-run-a-split-validator"
  }
]
