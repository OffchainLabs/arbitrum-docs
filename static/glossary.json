{"address-alias":{"title":"Address Alias","text":"An address deterministically generated from an L1 contract address used on L2 to safely identify the source of an L1 to L2 message.\n"},"arb-token-bridge":{"title":"Arb Token Bridge","text":"A series of contracts on an Arbitrum chain and its underlying chain that facilitate trustless movement of ERC-20 tokens between the two layers.\n"},"arbified-token-list":{"title":"Arbified Token List","text":"A token list that conforms to [Uniswap&#39;s token list specification](https://github.com/Uniswap/token-lists); Arbified lists are generated by inputting externally maintained list ([i.e., coinmarketcap&#39;s list](https://api.coinmarketcap.com/data-api/v3/uniswap/all.json)) and outputting a list that includes all of the instances of token contracts on the Arbitrum chain bridged via the canonical [Arb Token Bridge](/intro/glossary#arb-token-bridge) from tokens on the inputted list. (See code [here](https://github.com/OffchainLabs/arbitrum-token-lists).)\n"},"arbitrum":{"title":"Arbitrum","text":"\n"},"arbitrum-bridge-ui":{"title":"Arbitrum Bridge UI","text":"Web application built and maintained by [Offchain Labs](/intro/glossary#offchain-labs) for user-interactions with the [Arb Token Bridge](/intro/glossary#arb-token-bridge); visit it [here](https://bridge.arbitrum.io/).\n"},"arbitrum-classic":{"title":"Arbitrum Classic","text":"\n"},"arbitrum-full-node":{"title":"Arbitrum Full Node","text":"A party who keeps track of the state of an Arbitrum chain and receives remote procedure calls (RPCs) from clients. Analogous to a non-staking L1 Ethereum node.\n"},"arbitrum-orbit":{"title":"Arbitrum Orbit","text":"[Layer 3 (L3)](/intro/glossary#layer-3-l3)\n"},"arbos":{"title":"ArbOS","text":"Arbitrum&#39;s &quot;operating system&quot; that trustlessly handles system-level operations; includes the ability to emulate the EVM.\n"},"assertion":{"title":"Assertion","text":"A staked claim made by an Arbitrum [Validator](/intro/glossary#validator) representing a claim about an Arbitrum chain&#39;s state. An [Assertion](/intro/glossary#assertion) may, e.g., propose a new assertion, or may be a step in a [Challenge](/intro/glossary#challenge).\n"},"auction-contract":{"title":"Auction Contract","text":"A smart contract that handles the state, accounting of funds for bids, and various operations of the [Timeboost](/intro/glossary#timeboost) auction. The contract is deployed on the target chain for which Timeboost is enabled.\n"},"autonomous-auctioneer":{"title":"Autonomous Auctioneer","text":"Off chain software that receives bids from [Timeboost](/intro/glossary#timeboost)  participants, processes and validates bids, and then posts the top valid bid (or top two valid bids in the case of a tie) to the [Auction Contract](/intro/glossary#auction-contract)  to resolve the on-going Timeboost auction. The autonomous auctioneer, for a given chain, is provisioned &amp; deployed by an entity designated by the chain&#39;s owner.\n"},"batch":{"title":"Batch","text":"[Underlying Chain](/intro/glossary#underlying-chain),[Fast Inbox](/intro/glossary#fast-inbox)\n"},"blockchain":{"title":"Blockchain","text":"A distributed digital ledger that is used to record transactions and store data in a secure, transparent, and tamper-resistant way, notably in cryptocurrency protocols. \n"},"bls-signature":{"title":"BLS Signature","text":"\n"},"bold":{"title":"BoLD","text":"Short for &quot;Bounded Liquidity Delay&quot;; latest version of the Arbitrum [Challenge protocol](/intro/glossary#challenge-protocol) designed to eliminate [delay attack vectors](https://medium.com/offchainlabs/solutions-to-delay-attacks-on-rollups-434f9d05a07a) (see [here](https://medium.com/offchainlabs/bold-permissionless-validation-for-arbitrum-chains-9934eb5328cc) for more). Not currently on mainnet. \n"},"bridge":{"title":"Bridge","text":"[Cross-chain message](/intro/glossary#crosschain-message)\n"},"chain-owner":{"title":"Chain Owner","text":"An entity (i.e., a smart contract) with affordance to carry out critical upgrades to an Arbitrum chain&#39;s core protocol; this includes upgrading protocol contracts, setting core system parameters, and adding and removing other chain owners.\n"},"chain-state":{"title":"Chain state","text":"\n"},"challenge":{"title":"Challenge","text":"When two [Staker](/intro/glossary#staker)s disagree about the correct verdict on an [Assertion](/intro/glossary#assertion), those stakers can be put in a challenge. The challenge is refereed by the contracts on the underlying chain. Eventually one staker wins the challenge. The protocol guarantees that an honest  party will always win a challenge; the loser forfeits their stake. \n"},"challenge-period":{"title":"Challenge Period","text":"Window of time (one week on Arbitrum One) over which an [Assertion](/intro/glossary#assertion) can be challenged, and after which the assertion can be confirmed.\n"},"challenge-protocol":{"title":"Challenge protocol","text":"[Assertion](/intro/glossary#assertion)\n"},"client":{"title":"Client","text":"\n"},"confirmation":{"title":"Confirmation","text":"[Assertion](/intro/glossary#assertion),[L2 to L1 Message](/intro/glossary#l2-to-l1-message)\n"},"crosschain-message":{"title":"Cross-chain message","text":"An action taken on some chain A which asynchronously initiates an additional action on chain B. \n"},"custom-arbtoken":{"title":"Custom Arb-Token","text":"Any L2 token contract registered to the [Arb Token Bridge](/intro/glossary#arb-token-bridge) that isn&#39;t a standard arb-token (i.e., a token that uses any gateway other than the [StandardERC20 gateway](/intro/glossary#standarderc20-gateway) ).\n"},"custom-gateway":{"title":"Custom gateway","text":"Any [Token Gateway](/intro/glossary#token-gateway) that isn&#39;t the [StandardERC20 gateway](/intro/glossary#standarderc20-gateway).\n"},"dapp":{"title":"dApp","text":"Short for &quot;decentralized application.&quot; A dApp typically consists of smart contracts as well as a user-interface for interacting with them.\n"},"data-availability-certificate":{"title":"Data Availability Certificate","text":"\n"},"defensive-validator":{"title":"Defensive Validator","text":"A [Validator](/intro/glossary#validator) that watches an Arbitrum chain and takes action (i.e., stakes and challenges) only when and if an invalid [Assertion](/intro/glossary#assertion) occurs.\n"},"delayed-inbox":{"title":"Delayed Inbox","text":"[Fast Inbox](/intro/glossary#fast-inbox)\n"},"devtools-dashboard":{"title":"Dev-Tools Dashboard","text":"Web application built and maintained by [Offchain Labs](/intro/glossary#offchain-labs) for developers and users to debug Arbitrum transactions; i.e., executing or checking the status of [Cross-chain message](/intro/glossary#crosschain-message)s; visit it [here](https://retryable-dashboard.arbitrum.io/).   \n"},"dissection":{"title":"Dissection","text":"A step in the [Challenge protocol](/intro/glossary#challenge-protocol)  in which two challenging parties interactively narrow down their disagreement until they reach a [One Step Proof](/intro/glossary#one-step-proof).\n"},"ethereum-wallet":{"title":"Ethereum Wallet","text":"A software application used for transacting with the Ethereum [Blockchain](/intro/glossary#blockchain).\n"},"evm":{"title":"EVM+","text":"The paradigm introduced by [Stylus](/intro/glossary#stylus) in which Arbitrum&#39;s EVM compatibility is preserved while new features and improvements are introduced.\n"},"express-lane":{"title":"Express Lane","text":"[Timeboost](/intro/glossary#timeboost)\n"},"express-lane-controller":{"title":"Express Lane Controller","text":"An address, defined in the [Auction Contract](/intro/glossary#auction-contract), that is granted the privilege to use the [Express Lane](/intro/glossary#express-lane). These privileges are granted after verifying that the incoming transactions were properly signed by the express lane controller, among other checks.\n"},"fair-ordering-algorithm":{"title":"Fair Ordering Algorithm","text":"\n"},"fast-exit--liquidity-exit":{"title":"Fast Exit / Liquidity Exit","text":"A means by which a user can bypass an Arbitrum chain&#39;s [Challenge Period](/intro/glossary#challenge-period) when withdrawing fungible assets (or more generally, executing some &quot;fungible&quot; L2 to L1 operation); for trustless fast exits, a liquidity provider facilitates an atomic swap of the asset on L2 directly to L1.\n"},"fast-inbox":{"title":"Fast Inbox","text":"[Delayed Inbox](/intro/glossary#delayed-inbox)\n"},"first-come-first-serve-fcfs":{"title":"First Come First Serve (FCFS)","text":"A type of [Transaction Ordering Policy](/intro/glossary#transaction-ordering-policy) used by the sequencer in Arbitrum chains whereby incoming transactions are sequenced into a block in the order that the transactions arrived.\n"},"forceinclusion":{"title":"Force-Inclusion","text":"[Delayed Inbox](/intro/glossary#delayed-inbox)\n"},"fraud-proof":{"title":"Fraud proof","text":"\n"},"gas-price-floor":{"title":"Gas Price Floor","text":"\n"},"gateway-router":{"title":"Gateway Router","text":"Contracts in the [Arb Token Bridge](/intro/glossary#arb-token-bridge)  responsible for mapping tokens to their appropriate [Token Gateway](/intro/glossary#token-gateway).\n"},"genericcustom-gateway":{"title":"Generic-Custom Gateway","text":"A particular [Custom gateway](/intro/glossary#custom-gateway) via which an L1 token contract can be registered to a token contract deployed to L2. A useful alternative to the [StandardERC20 gateway](/intro/glossary#standarderc20-gateway) for projects that wish to control the address of their L2 token contract, maintain L2 token contract upgradability, and for various other use-cases. \n"},"ink":{"title":"Ink","text":"The equivalent of gas in the [Stylus](/intro/glossary#stylus) vm. Ink is introduced for finer granularity than gas offers since Stylus&#39;s operations are considerably cheaper than their EVM analogs. \n"},"l2-block":{"title":"L2 Block","text":"Data structure that represents a group of L2 transactions (analogous to L1 blocks).\n"},"l2-to-l1-message":{"title":"L2 to L1 Message","text":"[Challenge Period](/intro/glossary#challenge-period)\n"},"layer-3-l3":{"title":"Layer 3 (L3)","text":"\n"},"native-fee-token":{"title":"Native Fee Token","text":"[Arbitrum Orbit](/intro/glossary#arbitrum-orbit)\n"},"offchain-labs":{"title":"Offchain Labs","text":"\n"},"one-step-proof":{"title":"One Step Proof","text":"Final step in a challenge; a single operation of the Arbitrum VM ([WASM](/intro/glossary#wasm) ) is executed on the underlying chain, and the validity of its state transition is verified.\n"},"outbox":{"title":"Outbox","text":"An L1 contract responsible for tracking [L2 to L1 Message](/intro/glossary#l2-to-l1-message)s, including withdrawals, which can be executed once they are confirmed. The outbox stores a Merkle Root of all outgoing messages.\n"},"portal":{"title":"Portal","text":"A web application maintained by [Offchain Labs](/intro/glossary#offchain-labs) showcasing the Arbitrum ecosystem; visit it [here](https://portal.arbitrum.io/).\n"},"rblock":{"title":"RBlock","text":"Refer to [Assertion](/intro/glossary#assertion) \n"},"reorg":{"title":"Reorg","text":"A situation in which transactions on a chain that were at some point considered accepted then get rejected. In the context of an Arbitrum chain, once transactions are posted in the chain&#39;s [Fast Inbox](/intro/glossary#fast-inbox), the only way the chain can experience a reorg is if its [Underlying Chain](/intro/glossary#underlying-chain) itself reorgs. Of note, [Fraud proof](/intro/glossary#fraud-proof)s do not cause reorgs.   \n"},"retryable-autoredeem":{"title":"Retryable Autoredeem","text":"The &quot;automatic&quot; (i.e., requiring no additional user action) execution of a [Retryable Ticket](/intro/glossary#retryable-ticket)  on an Arbitrum chain.\n"},"retryable-redeem":{"title":"Retryable Redeem","text":"The execution of a [Retryable Ticket](/intro/glossary#retryable-ticket) on L2; can be automatic (see [Retryable Autoredeem](/intro/glossary#retryable-autoredeem)) or manual via a user-initiated L2 transaction.\n"},"retryable-ticket":{"title":"Retryable Ticket","text":"An L1 to L2 cross chain message initiated by an L1 transaction sent to an Arbitrum chain for execution (e.g., a token deposit).\n"},"reverse-token-gateway":{"title":"Reverse Token Gateway","text":"[Token Gateway](/intro/glossary#token-gateway)\n"},"sequencer-feed":{"title":"Sequencer Feed","text":"[Soft Confirmation](/intro/glossary#soft-confirmation),[Batch](/intro/glossary#batch)\n"},"shared-sequencing":{"title":"Shared Sequencing","text":"\n"},"smart-contract":{"title":"Smart Contract","text":"A computer program whose operations are defined and executed within a blockchain consensus protocol.\n"},"soft-confirmation":{"title":"Soft Confirmation","text":"\n"},"speed-limit":{"title":"Speed Limit","text":"\n"},"staker":{"title":"Staker","text":"[Validator](/intro/glossary#validator),[Assertion](/intro/glossary#assertion)\n"},"standard-arbtoken":{"title":"Standard Arb-Token","text":"An token contract on an Arbitrum chain deployed via the [StandardERC20 gateway](/intro/glossary#standarderc20-gateway); offers basic ERC20 functionality in addition to deposit / withdrawal affordances.\n"},"standarderc20-gateway":{"title":"StandardERC20 gateway","text":"[Token Gateway](/intro/glossary#token-gateway),[Standard Arb-Token](/intro/glossary#standard-arbtoken)\n"},"state-transition-function":{"title":"State Transition Function","text":"The STF (State Transition Function) defines how new blocks are produced from input messages (i.e. transactions) in an Arbitrum chain.\n"},"stylus":{"title":"Stylus","text":"\n"},"timeboost":{"title":"Timeboost","text":"\n"},"token-gateway":{"title":"Token Gateway","text":"[StandardERC20 gateway](/intro/glossary#standarderc20-gateway),[Generic-Custom Gateway](/intro/glossary#genericcustom-gateway),[WETH Gateway](/intro/glossary#weth-gateway)\n"},"transaction":{"title":"Transaction","text":"A user-initiated interaction with a Blockchain. Transactions are typically signed by users via wallets and are paid for via transaction fees. \n"},"transaction-ordering-policy":{"title":"Transaction Ordering Policy","text":"The rules and logic employed by a chain to order incoming transactions into a block.\n"},"underlying-chain":{"title":"Underlying Chain","text":"\n"},"validator":{"title":"Validator","text":"[Arbitrum Full Node](/intro/glossary#arbitrum-full-node),[Assertion](/intro/glossary#assertion),[Watchtower Validator](/intro/glossary#watchtower-validator),[Defensive Validator](/intro/glossary#defensive-validator)\n"},"wasm":{"title":"WASM","text":"[Fraud proof](/intro/glossary#fraud-proof),[Stylus](/intro/glossary#stylus)\n"},"wasmer":{"title":"WASMer","text":"A popular WebAssembly runtime for executing [WASM](/intro/glossary#wasm) binaries. [A fork of WASMer](https://github.com/OffchainLabs/wasmer) is used for executing [Stylus](/intro/glossary#stylus) programs. WASMer executes considerably faster than Geth executes EVM code, contributing to Stylus&#39;s lower fees.\n"},"watchtower-validator":{"title":"Watchtower Validator","text":"A [Validator](/intro/glossary#validator)  that never stakes / never takes on chain action, who raises the alarm (by whatever off-chain means it chooses) if it witnesses an invalid assertion.\n"},"weth-gateway":{"title":"WETH Gateway","text":"[Token Gateway](/intro/glossary#token-gateway) for handing the bridging of wrapped Ether (WETH). WETH is unwrapped on L1 and rewrapped on L1 upon depositing (and vice-versa upon withdrawing), ensuring WETH on L2 always remains collateralized. \n"}}